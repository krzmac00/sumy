{"created": 1750146271.1142504, "duration": 43.8842990398407, "exitcode": 1, "root": "/mnt/c/repos/sumy", "environment": {}, "summary": {"failed": 9, "passed": 15, "total": 24, "collected": 24}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": "tests/integration", "type": "Package"}]}, {"nodeid": "tests/integration/test_cross_module_interactions.py::BaseAPITestCase", "outcome": "passed", "result": []}, {"nodeid": "tests/integration/test_cross_module_interactions.py::TestUserContentCreationFlow", "outcome": "passed", "result": [{"nodeid": "tests/integration/test_cross_module_interactions.py::TestUserContentCreationFlow::test_complete_user_journey", "type": "TestCaseFunction", "lineno": 29}]}, {"nodeid": "tests/integration/test_cross_module_interactions.py::TestForumUserInteractions", "outcome": "passed", "result": [{"nodeid": "tests/integration/test_cross_module_interactions.py::TestForumUserInteractions::test_anonymous_posting_with_user_tracking", "type": "TestCaseFunction", "lineno": 29}, {"nodeid": "tests/integration/test_cross_module_interactions.py::TestForumUserInteractions::test_user_blacklist_affects_content_visibility", "type": "TestCaseFunction", "lineno": 29}]}, {"nodeid": "tests/integration/test_cross_module_interactions.py::TestNewsAndForumIntegration", "outcome": "passed", "result": [{"nodeid": "tests/integration/test_cross_module_interactions.py::TestNewsAndForumIntegration::test_lecturer_news_creates_discussion_thread", "type": "TestCaseFunction", "lineno": 29}]}, {"nodeid": "tests/integration/test_cross_module_interactions.py::TestAdvertisementUserPermissions", "outcome": "passed", "result": [{"nodeid": "tests/integration/test_cross_module_interactions.py::TestAdvertisementUserPermissions::test_advertisement_lifecycle_with_permissions", "type": "TestCaseFunction", "lineno": 29}]}, {"nodeid": "tests/integration/test_cross_module_interactions.py::TestEventCalendarIntegration", "outcome": "passed", "result": [{"nodeid": "tests/integration/test_cross_module_interactions.py::TestEventCalendarIntegration::test_personal_and_shared_events", "type": "TestCaseFunction", "lineno": 29}]}, {"nodeid": "tests/integration/test_cross_module_interactions.py::TestMapBuildingIntegration", "outcome": "passed", "result": [{"nodeid": "tests/integration/test_cross_module_interactions.py::TestMapBuildingIntegration::test_building_room_navigation", "type": "TestCaseFunction", "lineno": 29}]}, {"nodeid": "tests/integration/test_cross_module_interactions.py::TestCrossModuleSearch", "outcome": "passed", "result": [{"nodeid": "tests/integration/test_cross_module_interactions.py::TestCrossModuleSearch::test_unified_search_across_modules", "type": "TestCaseFunction", "lineno": 29}]}, {"nodeid": "tests/integration/test_cross_module_interactions.py::TestAnalyticsIntegration", "outcome": "passed", "result": [{"nodeid": "tests/integration/test_cross_module_interactions.py::TestAnalyticsIntegration::test_user_activity_tracking", "type": "TestCaseFunction", "lineno": 29}]}, {"nodeid": "tests/integration/test_cross_module_interactions.py::TestPerformanceAcrossModules", "outcome": "passed", "result": [{"nodeid": "tests/integration/test_cross_module_interactions.py::TestPerformanceAcrossModules::test_bulk_content_creation_performance", "type": "Function", "lineno": 688}]}, {"nodeid": "tests/integration/test_cross_module_interactions.py", "outcome": "passed", "result": [{"nodeid": "tests/integration/test_cross_module_interactions.py::BaseAPITestCase", "type": "UnitTestCase"}, {"nodeid": "tests/integration/test_cross_module_interactions.py::TestUserContentCreationFlow", "type": "UnitTestCase"}, {"nodeid": "tests/integration/test_cross_module_interactions.py::TestForumUserInteractions", "type": "UnitTestCase"}, {"nodeid": "tests/integration/test_cross_module_interactions.py::TestNewsAndForumIntegration", "type": "UnitTestCase"}, {"nodeid": "tests/integration/test_cross_module_interactions.py::TestAdvertisementUserPermissions", "type": "UnitTestCase"}, {"nodeid": "tests/integration/test_cross_module_interactions.py::TestEventCalendarIntegration", "type": "UnitTestCase"}, {"nodeid": "tests/integration/test_cross_module_interactions.py::TestMapBuildingIntegration", "type": "UnitTestCase"}, {"nodeid": "tests/integration/test_cross_module_interactions.py::TestCrossModuleSearch", "type": "UnitTestCase"}, {"nodeid": "tests/integration/test_cross_module_interactions.py::TestAnalyticsIntegration", "type": "UnitTestCase"}, {"nodeid": "tests/integration/test_cross_module_interactions.py::TestPerformanceAcrossModules", "type": "Class"}]}, {"nodeid": "tests/integration/test_data_consistency.py::BaseAPITestCase", "outcome": "passed", "result": []}, {"nodeid": "tests/integration/test_data_consistency.py::TestDataConsistency", "outcome": "passed", "result": [{"nodeid": "tests/integration/test_data_consistency.py::TestDataConsistency::test_advertisement_expiry_consistency", "type": "TestCaseFunction", "lineno": 29}, {"nodeid": "tests/integration/test_data_consistency.py::TestDataConsistency::test_cascade_update_counts", "type": "TestCaseFunction", "lineno": 29}, {"nodeid": "tests/integration/test_data_consistency.py::TestDataConsistency::test_concurrent_vote_updates", "type": "TestCaseFunction", "lineno": 29}, {"nodeid": "tests/integration/test_data_consistency.py::TestDataConsistency::test_event_overlap_validation", "type": "TestCaseFunction", "lineno": 29}, {"nodeid": "tests/integration/test_data_consistency.py::TestDataConsistency::test_thread_deletion_cascades", "type": "TestCaseFunction", "lineno": 29}, {"nodeid": "tests/integration/test_data_consistency.py::TestDataConsistency::test_user_deletion_cascades", "type": "TestCaseFunction", "lineno": 29}]}, {"nodeid": "tests/integration/test_data_consistency.py::TestTransactionIntegrity", "outcome": "passed", "result": [{"nodeid": "tests/integration/test_data_consistency.py::TestTransactionIntegrity::test_bulk_operation_atomicity", "type": "TestCaseFunction", "lineno": 29}, {"nodeid": "tests/integration/test_data_consistency.py::TestTransactionIntegrity::test_concurrent_update_safety", "type": "TestCaseFunction", "lineno": 29}]}, {"nodeid": "tests/integration/test_data_consistency.py", "outcome": "passed", "result": [{"nodeid": "tests/integration/test_data_consistency.py::BaseAPITestCase", "type": "UnitTestCase"}, {"nodeid": "tests/integration/test_data_consistency.py::TestDataConsistency", "type": "UnitTestCase"}, {"nodeid": "tests/integration/test_data_consistency.py::TestTransactionIntegrity", "type": "UnitTestCase"}]}, {"nodeid": "tests/integration/test_notification_flow.py::BaseAPITestCase", "outcome": "passed", "result": []}, {"nodeid": "tests/integration/test_notification_flow.py::TestNotificationFlows", "outcome": "passed", "result": [{"nodeid": "tests/integration/test_notification_flow.py::TestNotificationFlows::test_advertisement_comment_notifications", "type": "TestCaseFunction", "lineno": 29}, {"nodeid": "tests/integration/test_notification_flow.py::TestNotificationFlows::test_event_reminder_notifications", "type": "TestCaseFunction", "lineno": 29}, {"nodeid": "tests/integration/test_notification_flow.py::TestNotificationFlows::test_forum_reply_notifications", "type": "TestCaseFunction", "lineno": 29}, {"nodeid": "tests/integration/test_notification_flow.py::TestNotificationFlows::test_mention_notifications_in_posts", "type": "TestCaseFunction", "lineno": 29}]}, {"nodeid": "tests/integration/test_notification_flow.py::TestDigestNotifications", "outcome": "passed", "result": [{"nodeid": "tests/integration/test_notification_flow.py::TestDigestNotifications::test_daily_activity_digest", "type": "TestCaseFunction", "lineno": 29}, {"nodeid": "tests/integration/test_notification_flow.py::TestDigestNotifications::test_weekly_summary_generation", "type": "TestCaseFunction", "lineno": 29}]}, {"nodeid": "tests/integration/test_notification_flow.py", "outcome": "passed", "result": [{"nodeid": "tests/integration/test_notification_flow.py::BaseAPITestCase", "type": "UnitTestCase"}, {"nodeid": "tests/integration/test_notification_flow.py::TestNotificationFlows", "type": "UnitTestCase"}, {"nodeid": "tests/integration/test_notification_flow.py::TestDigestNotifications", "type": "UnitTestCase"}]}, {"nodeid": "tests/integration", "outcome": "passed", "result": [{"nodeid": "tests/integration/test_cross_module_interactions.py", "type": "Module"}, {"nodeid": "tests/integration/test_data_consistency.py", "type": "Module"}, {"nodeid": "tests/integration/test_notification_flow.py", "type": "Module"}]}], "tests": [{"nodeid": "tests/integration/test_cross_module_interactions.py::TestUserContentCreationFlow::test_complete_user_journey", "lineno": 29, "outcome": "failed", "keywords": ["test_complete_user_journey", "TestUserContentCreationFlow", "test_cross_module_interactions.py", "integration", "tests", "sumy", ""], "setup": {"duration": 2.841766372002894, "outcome": "passed"}, "call": {"duration": 4.7174650139932055, "outcome": "failed", "crash": {"path": "/home/student/.local/share/uv/python/cpython-3.13.3-linux-x86_64-gnu/lib/python3.13/unittest/case.py", "lineno": 900, "message": "AssertionError: 0 != 1"}, "traceback": [{"path": "tests/conftest.py", "lineno": 40, "message": "in wrapper"}, {"path": "tests/integration/test_cross_module_interactions.py", "lineno": 142, "message": "in test_complete_user_journey"}], "stdout": "\n============================================================\nTEST: test_complete_user_journey\n============================================================\n  Test complete user journey across multiple modules\n  \n  Flow:\n  1. User registration and activation\n  2. Create forum thread\n  3. Post advertisement\n  4. Comment on advertisement\n  5. Create calendar event\n  6. Check user activity analytics\n============================================================\n\n", "longrepr": "tests/conftest.py:40: in wrapper\n    return test_method(*args, **kwargs)\ntests/integration/test_cross_module_interactions.py:142: in test_complete_user_journey\n    self.assertEqual(Thread.objects.filter(author=user).count(), 1)\nE   AssertionError: 0 != 1"}, "teardown": {"duration": 0.0036690929846372455, "outcome": "passed"}}, {"nodeid": "tests/integration/test_cross_module_interactions.py::TestForumUserInteractions::test_anonymous_posting_with_user_tracking", "lineno": 29, "outcome": "failed", "keywords": ["test_anonymous_posting_with_user_tracking", "TestForumUserInteractions", "test_cross_module_interactions.py", "integration", "tests", "sumy", ""], "setup": {"duration": 0.005565213999943808, "outcome": "passed"}, "call": {"duration": 0.3361694820050616, "outcome": "failed", "crash": {"path": "/home/student/.local/share/uv/python/cpython-3.13.3-linux-x86_64-gnu/lib/python3.13/unittest/case.py", "lineno": 900, "message": "AssertionError: None != <User: api_test@edu.p.lodz.pl>"}, "traceback": [{"path": "tests/conftest.py", "lineno": 40, "message": "in wrapper"}, {"path": "tests/integration/test_cross_module_interactions.py", "lineno": 206, "message": "in test_anonymous_posting_with_user_tracking"}], "stdout": "\n============================================================\nTEST: test_anonymous_posting_with_user_tracking\n============================================================\n  Test anonymous posting while maintaining user tracking\n  \n  Verifies:\n  - Anonymous posts hide user identity in API\n  - System still tracks the actual author\n  - User can manage their anonymous content\n  - Vote tracking works with anonymous posts\n============================================================\n\n", "longrepr": "tests/conftest.py:40: in wrapper\n    return test_method(*args, **kwargs)\ntests/integration/test_cross_module_interactions.py:206: in test_anonymous_posting_with_user_tracking\n    self.assertEqual(thread.author, self.test_user)\nE   AssertionError: None != <User: api_test@edu.p.lodz.pl>"}, "teardown": {"duration": 0.00035579700488597155, "outcome": "passed"}}, {"nodeid": "tests/integration/test_cross_module_interactions.py::TestForumUserInteractions::test_user_blacklist_affects_content_visibility", "lineno": 29, "outcome": "passed", "keywords": ["test_user_blacklist_affects_content_visibility", "TestForumUserInteractions", "test_cross_module_interactions.py", "integration", "tests", "sumy", ""], "setup": {"duration": 0.0008141389989759773, "outcome": "passed"}, "call": {"duration": 0.7191739109985065, "outcome": "passed", "stdout": "\n============================================================\nTEST: test_user_blacklist_affects_content_visibility\n============================================================\n  Test that user blacklist affects content visibility across modules\n  \n  Verifies:\n  - Users can blacklist other users\n  - Blacklisted content is filtered in forum\n  - Blacklist doesn't affect advertisements\n  - Admin content bypasses blacklist\n============================================================\n\n"}, "teardown": {"duration": 0.0010723570012487471, "outcome": "passed"}}, {"nodeid": "tests/integration/test_cross_module_interactions.py::TestNewsAndForumIntegration::test_lecturer_news_creates_discussion_thread", "lineno": 29, "outcome": "passed", "keywords": ["test_lecturer_news_creates_discussion_thread", "TestNewsAndForumIntegration", "test_cross_module_interactions.py", "integration", "tests", "sumy", ""], "setup": {"duration": 0.005495291989063844, "outcome": "passed"}, "call": {"duration": 0.4887621170200873, "outcome": "passed", "stdout": "\n============================================================\nTEST: test_lecturer_news_creates_discussion_thread\n============================================================\n  Test that lecturers can publish news and it integrates with forum\n  \n  Verifies:\n  - Only lecturers can publish news\n  - Students cannot publish news\n  - News categories are properly structured\n  - News can have event information\n============================================================\n\n"}, "teardown": {"duration": 0.0006942719919607043, "outcome": "passed"}}, {"nodeid": "tests/integration/test_cross_module_interactions.py::TestAdvertisementUserPermissions::test_advertisement_lifecycle_with_permissions", "lineno": 29, "outcome": "failed", "keywords": ["test_advertisement_lifecycle_with_permissions", "TestAdvertisementUserPermissions", "test_cross_module_interactions.py", "integration", "tests", "sumy", ""], "setup": {"duration": 0.005804946995340288, "outcome": "passed"}, "call": {"duration": 0.3184661319828592, "outcome": "failed", "crash": {"path": "/home/student/.local/share/uv/python/cpython-3.13.3-linux-x86_64-gnu/lib/python3.13/unittest/case.py", "lineno": 900, "message": "AssertionError: 404 != 403"}, "traceback": [{"path": "tests/conftest.py", "lineno": 40, "message": "in wrapper"}, {"path": "tests/integration/test_cross_module_interactions.py", "lineno": 361, "message": "in test_advertisement_lifecycle_with_permissions"}], "stdout": "\n============================================================\nTEST: test_advertisement_lifecycle_with_permissions\n============================================================\n  Test complete advertisement lifecycle with proper permissions\n  \n  Verifies:\n  - Users can create advertisements\n  - Only authors can edit/delete their ads\n  - Comments update ad activity\n  - Expired ads are handled properly\n  - Private comments vs public comments\n============================================================\n\n", "log": [{"name": "django.request", "msg": "Not Found: /api/noticeboard/advertisements/531/", "args": null, "levelname": "WARNING", "levelno": 30, "pathname": "/mnt/c/repos/sumy/.venv/lib/python3.13/site-packages/django/utils/log.py", "filename": "log.py", "module": "log", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 248, "funcName": "log_response", "created": 1750146241.5441315, "msecs": 544.0, "relativeCreated": 28744.442844, "thread": 140354745313088, "threadName": "MainThread", "processName": "MainProcess", "process": 45844, "taskName": null, "status_code": 404, "request": "<WSGIRequest: PATCH '/api/noticeboard/advertisements/531/'>"}], "longrepr": "tests/conftest.py:40: in wrapper\n    return test_method(*args, **kwargs)\ntests/integration/test_cross_module_interactions.py:361: in test_advertisement_lifecycle_with_permissions\n    self.assertEqual(edit_response.status_code, status.HTTP_403_FORBIDDEN)\nE   AssertionError: 404 != 403"}, "teardown": {"duration": 0.0010193480120506138, "outcome": "passed"}}, {"nodeid": "tests/integration/test_cross_module_interactions.py::TestEventCalendarIntegration::test_personal_and_shared_events", "lineno": 29, "outcome": "passed", "keywords": ["test_personal_and_shared_events", "TestEventCalendarIntegration", "test_cross_module_interactions.py", "integration", "tests", "sumy", ""], "setup": {"duration": 0.005445148010039702, "outcome": "passed"}, "call": {"duration": 0.32966541399946436, "outcome": "passed", "stdout": "\n============================================================\nTEST: test_personal_and_shared_events\n============================================================\n  Test personal event management and shared event visibility\n  \n  Verifies:\n  - Users can create personal events\n  - Events are properly categorized\n  - Date filtering works correctly\n  - Users only see their own private events\n  - Public events are visible to all\n============================================================\n\n"}, "teardown": {"duration": 0.0007083239906933159, "outcome": "passed"}}, {"nodeid": "tests/integration/test_cross_module_interactions.py::TestMapBuildingIntegration::test_building_room_navigation", "lineno": 29, "outcome": "failed", "keywords": ["test_building_room_navigation", "TestMapBuildingIntegration", "test_cross_module_interactions.py", "integration", "tests", "sumy", ""], "setup": {"duration": 0.005349733022740111, "outcome": "passed"}, "call": {"duration": 0.19957970498944633, "outcome": "failed", "crash": {"path": "/mnt/c/repos/sumy/tests/integration/test_cross_module_interactions.py", "lineno": 556, "message": "AttributeError: 'Event' object has no attribute 'location'"}, "traceback": [{"path": "tests/conftest.py", "lineno": 40, "message": "in wrapper"}, {"path": "tests/integration/test_cross_module_interactions.py", "lineno": 556, "message": "in test_building_room_navigation"}], "stdout": "\n============================================================\nTEST: test_building_room_navigation\n============================================================\n  Test building and room information access\n  \n  Verifies:\n  - Building hierarchy works correctly\n  - Room search functionality\n  - Integration with event locations\n  - Proper serialization of nested data\n============================================================\n\n", "longrepr": "tests/conftest.py:40: in wrapper\n    return test_method(*args, **kwargs)\ntests/integration/test_cross_module_interactions.py:556: in test_building_room_navigation\n    self.assertIn('EB', event.location)\nE   AttributeError: 'Event' object has no attribute 'location'"}, "teardown": {"duration": 0.0008080379921011627, "outcome": "passed"}}, {"nodeid": "tests/integration/test_cross_module_interactions.py::TestCrossModuleSearch::test_unified_search_across_modules", "lineno": 29, "outcome": "failed", "keywords": ["test_unified_search_across_modules", "TestCrossModuleSearch", "test_cross_module_interactions.py", "integration", "tests", "sumy", ""], "setup": {"duration": 0.00543787598144263, "outcome": "passed"}, "call": {"duration": 0.36058521099039353, "outcome": "failed", "crash": {"path": "/mnt/c/repos/sumy/tests/integration/test_cross_module_interactions.py", "lineno": 624, "message": "TypeError: list indices must be integers or slices, not str"}, "traceback": [{"path": "tests/conftest.py", "lineno": 40, "message": "in wrapper"}, {"path": "tests/integration/test_cross_module_interactions.py", "lineno": 624, "message": "in test_unified_search_across_modules"}], "stdout": "\n============================================================\nTEST: test_unified_search_across_modules\n============================================================\n  Test search functionality across forum, news, and advertisements\n  \n  Verifies:\n  - Search finds content across modules\n  - Results are properly filtered by module\n  - Search respects permissions\n  - Relevance ranking works\n============================================================\n\n", "longrepr": "tests/conftest.py:40: in wrapper\n    return test_method(*args, **kwargs)\ntests/integration/test_cross_module_interactions.py:624: in test_unified_search_across_modules\n    self.assertGreaterEqual(ad_search.data['count'], 1)\nE   TypeError: list indices must be integers or slices, not str"}, "teardown": {"duration": 0.0009038429998327047, "outcome": "passed"}}, {"nodeid": "tests/integration/test_cross_module_interactions.py::TestAnalyticsIntegration::test_user_activity_tracking", "lineno": 29, "outcome": "failed", "keywords": ["test_user_activity_tracking", "TestAnalyticsIntegration", "test_cross_module_interactions.py", "integration", "tests", "sumy", ""], "setup": {"duration": 0.00525825799559243, "outcome": "passed"}, "call": {"duration": 0.28802364398143254, "outcome": "failed", "crash": {"path": "/mnt/c/repos/sumy/tests/integration/test_cross_module_interactions.py", "lineno": 681, "message": "AttributeError: 'EndpointUsage' object has no attribute 'timestamp'"}, "traceback": [{"path": "tests/conftest.py", "lineno": 40, "message": "in wrapper"}, {"path": "tests/integration/test_cross_module_interactions.py", "lineno": 681, "message": "in test_user_activity_tracking"}], "stdout": "\n============================================================\nTEST: test_user_activity_tracking\n============================================================\n  Test that user activities are tracked across modules\n  \n  Verifies:\n  - API endpoint access is tracked\n  - User actions are logged\n  - Analytics data is accessible\n  - Performance metrics are recorded\n============================================================\n\n", "longrepr": "tests/conftest.py:40: in wrapper\n    return test_method(*args, **kwargs)\ntests/integration/test_cross_module_interactions.py:681: in test_user_activity_tracking\n    self.assertIsNotNone(thread_usage.timestamp)\nE   AttributeError: 'EndpointUsage' object has no attribute 'timestamp'"}, "teardown": {"duration": 0.000811428006272763, "outcome": "passed"}}, {"nodeid": "tests/integration/test_cross_module_interactions.py::TestPerformanceAcrossModules::test_bulk_content_creation_performance", "lineno": 688, "outcome": "passed", "keywords": ["test_bulk_content_creation_performance", "TestPerformanceAcrossModules", "django_db", "test_cross_module_interactions.py", "integration", "tests", "sumy", ""], "setup": {"duration": 0.1594504880195018, "outcome": "passed"}, "call": {"duration": 4.715201216982678, "outcome": "passed", "stdout": "bulk_creation: 4.559s\nretrieval: 0.156s\n"}, "teardown": {"duration": 0.00314901300589554, "outcome": "passed"}}, {"nodeid": "tests/integration/test_data_consistency.py::TestDataConsistency::test_advertisement_expiry_consistency", "lineno": 29, "outcome": "failed", "keywords": ["test_advertisement_expiry_consistency", "TestDataConsistency", "test_data_consistency.py", "integration", "tests", "sumy", ""], "setup": {"duration": 0.001047792989993468, "outcome": "passed"}, "call": {"duration": 0.4651373609958682, "outcome": "failed", "crash": {"path": "/mnt/c/repos/sumy/tests/integration/test_data_consistency.py", "lineno": 208, "message": "TypeError: list indices must be integers or slices, not str"}, "traceback": [{"path": "tests/conftest.py", "lineno": 40, "message": "in wrapper"}, {"path": "tests/integration/test_data_consistency.py", "lineno": 208, "message": "in test_advertisement_expiry_consistency"}], "stdout": "\n============================================================\nTEST: test_advertisement_expiry_consistency\n============================================================\n  Test that advertisement expiry is handled consistently\n  \n  Verifies:\n  - Expired ads are marked inactive\n  - Comments on expired ads are handled\n  - Search excludes expired ads\n  - User can still see their expired ads\n============================================================\n\n", "longrepr": "tests/conftest.py:40: in wrapper\n    return test_method(*args, **kwargs)\ntests/integration/test_data_consistency.py:208: in test_advertisement_expiry_consistency\n    ad_ids = [ad['id'] for ad in response.data['results']]\nE   TypeError: list indices must be integers or slices, not str"}, "teardown": {"duration": 0.00040184598765335977, "outcome": "passed"}}, {"nodeid": "tests/integration/test_data_consistency.py::TestDataConsistency::test_cascade_update_counts", "lineno": 29, "outcome": "passed", "keywords": ["test_cascade_update_counts", "TestDataConsistency", "test_data_consistency.py", "integration", "tests", "sumy", ""], "setup": {"duration": 0.0009451690129935741, "outcome": "passed"}, "call": {"duration": 1.0808770400180947, "outcome": "passed", "stdout": "\n============================================================\nTEST: test_cascade_update_counts\n============================================================\n  Test that count fields are updated correctly on cascading operations\n  \n  Verifies:\n  - Post count updates when posts are added/deleted\n  - Vote count updates when votes change\n  - Comment count on advertisements\n  - Cached counts match actual counts\n============================================================\n\n"}, "teardown": {"duration": 0.0002907819871325046, "outcome": "passed"}}, {"nodeid": "tests/integration/test_data_consistency.py::TestDataConsistency::test_concurrent_vote_updates", "lineno": 29, "outcome": "passed", "keywords": ["test_concurrent_vote_updates", "TestDataConsistency", "test_data_consistency.py", "integration", "tests", "sumy", ""], "setup": {"duration": 0.0008083929715212435, "outcome": "passed"}, "call": {"duration": 1.1509688480000477, "outcome": "passed", "stdout": "\n============================================================\nTEST: test_concurrent_vote_updates\n============================================================\n  Test that concurrent vote updates maintain consistency\n  \n  Verifies:\n  - Vote counts remain accurate with concurrent updates\n  - No duplicate votes are created\n  - Vote changes are atomic\n============================================================\n\n"}, "teardown": {"duration": 0.00031180301448330283, "outcome": "passed"}}, {"nodeid": "tests/integration/test_data_consistency.py::TestDataConsistency::test_event_overlap_validation", "lineno": 29, "outcome": "passed", "keywords": ["test_event_overlap_validation", "TestDataConsistency", "test_data_consistency.py", "integration", "tests", "sumy", ""], "setup": {"duration": 0.0008034829807002097, "outcome": "passed"}, "call": {"duration": 0.1761595790158026, "outcome": "passed", "stdout": "\n============================================================\nTEST: test_event_overlap_validation\n============================================================\n  Test that event scheduling validates overlaps\n  \n  Verifies:\n  - Users cannot double-book themselves\n  - Event time validation works\n  - Timezone handling is consistent\n============================================================\n\n"}, "teardown": {"duration": 0.0002770919818431139, "outcome": "passed"}}, {"nodeid": "tests/integration/test_data_consistency.py::TestDataConsistency::test_thread_deletion_cascades", "lineno": 29, "outcome": "failed", "keywords": ["test_thread_deletion_cascades", "TestDataConsistency", "test_data_consistency.py", "integration", "tests", "sumy", ""], "setup": {"duration": 0.000755601009586826, "outcome": "passed"}, "call": {"duration": 0.9091287110059056, "outcome": "failed", "crash": {"path": "/mnt/c/repos/sumy/mainapp/post.py", "lineno": 199, "message": "django.core.exceptions.ValidationError: ['Vote must be for either a thread or a post, not both or neither.']"}, "traceback": [{"path": "tests/conftest.py", "lineno": 40, "message": "in wrapper"}, {"path": "tests/integration/test_data_consistency.py", "lineno": 101, "message": "in test_thread_deletion_cascades"}, {"path": ".venv/lib/python3.13/site-packages/factory/base.py", "lineno": 40, "message": "in __call__"}, {"path": ".venv/lib/python3.13/site-packages/factory/base.py", "lineno": 528, "message": "in create"}, {"path": ".venv/lib/python3.13/site-packages/factory/django.py", "lineno": 121, "message": "in _generate"}, {"path": ".venv/lib/python3.13/site-packages/factory/base.py", "lineno": 465, "message": "in _generate"}, {"path": ".venv/lib/python3.13/site-packages/factory/builder.py", "lineno": 274, "message": "in build"}, {"path": ".venv/lib/python3.13/site-packages/factory/base.py", "lineno": 317, "message": "in instantiate"}, {"path": ".venv/lib/python3.13/site-packages/factory/django.py", "lineno": 171, "message": "in _create"}, {"path": ".venv/lib/python3.13/site-packages/factory/django.py", "lineno": 144, "message": "in _get_or_create"}, {"path": ".venv/lib/python3.13/site-packages/django/db/models/manager.py", "lineno": 87, "message": "in manager_method"}, {"path": ".venv/lib/python3.13/site-packages/django/db/models/query.py", "lineno": 955, "message": "in get_or_create"}, {"path": ".venv/lib/python3.13/site-packages/django/db/models/query.py", "lineno": 679, "message": "in create"}, {"path": "mainapp/post.py", "lineno": 208, "message": "in save"}, {"path": "mainapp/post.py", "lineno": 199, "message": "in clean"}], "stdout": "\n============================================================\nTEST: test_thread_deletion_cascades\n============================================================\n  Test that thread deletion properly handles all related data\n  \n  Verifies:\n  - Posts are deleted\n  - Votes are deleted\n  - User statistics are updated\n  - No orphaned data remains\n============================================================\n\n", "longrepr": ".venv/lib/python3.13/site-packages/django/db/models/query.py:948: in get_or_create\n    return self.get(**kwargs), False\n.venv/lib/python3.13/site-packages/django/db/models/query.py:649: in get\n    raise self.model.DoesNotExist(\nE   mainapp.post.Vote.DoesNotExist: Vote matching query does not exist.\n\nDuring handling of the above exception, another exception occurred:\ntests/conftest.py:40: in wrapper\n    return test_method(*args, **kwargs)\ntests/integration/test_data_consistency.py:101: in test_thread_deletion_cascades\n    VoteFactory(post=posts[0], user=voter, vote_type='upvote')\n.venv/lib/python3.13/site-packages/factory/base.py:40: in __call__\n    return cls.create(**kwargs)\n.venv/lib/python3.13/site-packages/factory/base.py:528: in create\n    return cls._generate(enums.CREATE_STRATEGY, kwargs)\n.venv/lib/python3.13/site-packages/factory/django.py:121: in _generate\n    return super()._generate(strategy, params)\n.venv/lib/python3.13/site-packages/factory/base.py:465: in _generate\n    return step.build()\n.venv/lib/python3.13/site-packages/factory/builder.py:274: in build\n    instance = self.factory_meta.instantiate(\n.venv/lib/python3.13/site-packages/factory/base.py:317: in instantiate\n    return self.factory._create(model, *args, **kwargs)\n.venv/lib/python3.13/site-packages/factory/django.py:171: in _create\n    return cls._get_or_create(model_class, *args, **kwargs)\n.venv/lib/python3.13/site-packages/factory/django.py:144: in _get_or_create\n    instance, _created = manager.get_or_create(*args, **key_fields)\n.venv/lib/python3.13/site-packages/django/db/models/manager.py:87: in manager_method\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\n.venv/lib/python3.13/site-packages/django/db/models/query.py:955: in get_or_create\n    return self.create(**params), True\n.venv/lib/python3.13/site-packages/django/db/models/query.py:679: in create\n    obj.save(force_insert=True, using=self.db)\nmainapp/post.py:208: in save\n    self.clean()\nmainapp/post.py:199: in clean\n    raise ValidationError(\"Vote must be for either a thread or a post, not both or neither.\")\nE   django.core.exceptions.ValidationError: ['Vote must be for either a thread or a post, not both or neither.']"}, "teardown": {"duration": 0.00035976499202661216, "outcome": "passed"}}, {"nodeid": "tests/integration/test_data_consistency.py::TestDataConsistency::test_user_deletion_cascades", "lineno": 29, "outcome": "failed", "keywords": ["test_user_deletion_cascades", "TestDataConsistency", "test_data_consistency.py", "integration", "tests", "sumy", ""], "setup": {"duration": 0.0007778319995850325, "outcome": "passed"}, "call": {"duration": 0.6209241579927038, "outcome": "failed", "crash": {"path": "/mnt/c/repos/sumy/mainapp/post.py", "lineno": 199, "message": "django.core.exceptions.ValidationError: ['Vote must be for either a thread or a post, not both or neither.']"}, "traceback": [{"path": "tests/conftest.py", "lineno": 40, "message": "in wrapper"}, {"path": "tests/integration/test_data_consistency.py", "lineno": 58, "message": "in test_user_deletion_cascades"}, {"path": ".venv/lib/python3.13/site-packages/factory/base.py", "lineno": 40, "message": "in __call__"}, {"path": ".venv/lib/python3.13/site-packages/factory/base.py", "lineno": 528, "message": "in create"}, {"path": ".venv/lib/python3.13/site-packages/factory/django.py", "lineno": 121, "message": "in _generate"}, {"path": ".venv/lib/python3.13/site-packages/factory/base.py", "lineno": 465, "message": "in _generate"}, {"path": ".venv/lib/python3.13/site-packages/factory/builder.py", "lineno": 274, "message": "in build"}, {"path": ".venv/lib/python3.13/site-packages/factory/base.py", "lineno": 317, "message": "in instantiate"}, {"path": ".venv/lib/python3.13/site-packages/factory/django.py", "lineno": 171, "message": "in _create"}, {"path": ".venv/lib/python3.13/site-packages/factory/django.py", "lineno": 144, "message": "in _get_or_create"}, {"path": ".venv/lib/python3.13/site-packages/django/db/models/manager.py", "lineno": 87, "message": "in manager_method"}, {"path": ".venv/lib/python3.13/site-packages/django/db/models/query.py", "lineno": 955, "message": "in get_or_create"}, {"path": ".venv/lib/python3.13/site-packages/django/db/models/query.py", "lineno": 679, "message": "in create"}, {"path": "mainapp/post.py", "lineno": 208, "message": "in save"}, {"path": "mainapp/post.py", "lineno": 199, "message": "in clean"}], "stdout": "\n============================================================\nTEST: test_user_deletion_cascades\n============================================================\n  Test that user deletion properly cascades to all related content\n  \n  Verifies:\n  - User's threads are handled (deleted or anonymized)\n  - User's posts are handled\n  - User's advertisements are handled\n  - User's events are deleted\n  - Vote counts are updated\n============================================================\n\n", "longrepr": ".venv/lib/python3.13/site-packages/django/db/models/query.py:948: in get_or_create\n    return self.get(**kwargs), False\n.venv/lib/python3.13/site-packages/django/db/models/query.py:649: in get\n    raise self.model.DoesNotExist(\nE   mainapp.post.Vote.DoesNotExist: Vote matching query does not exist.\n\nDuring handling of the above exception, another exception occurred:\ntests/conftest.py:40: in wrapper\n    return test_method(*args, **kwargs)\ntests/integration/test_data_consistency.py:58: in test_user_deletion_cascades\n    vote2 = VoteFactory(post=other_post, user=user)\n.venv/lib/python3.13/site-packages/factory/base.py:40: in __call__\n    return cls.create(**kwargs)\n.venv/lib/python3.13/site-packages/factory/base.py:528: in create\n    return cls._generate(enums.CREATE_STRATEGY, kwargs)\n.venv/lib/python3.13/site-packages/factory/django.py:121: in _generate\n    return super()._generate(strategy, params)\n.venv/lib/python3.13/site-packages/factory/base.py:465: in _generate\n    return step.build()\n.venv/lib/python3.13/site-packages/factory/builder.py:274: in build\n    instance = self.factory_meta.instantiate(\n.venv/lib/python3.13/site-packages/factory/base.py:317: in instantiate\n    return self.factory._create(model, *args, **kwargs)\n.venv/lib/python3.13/site-packages/factory/django.py:171: in _create\n    return cls._get_or_create(model_class, *args, **kwargs)\n.venv/lib/python3.13/site-packages/factory/django.py:144: in _get_or_create\n    instance, _created = manager.get_or_create(*args, **key_fields)\n.venv/lib/python3.13/site-packages/django/db/models/manager.py:87: in manager_method\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\n.venv/lib/python3.13/site-packages/django/db/models/query.py:955: in get_or_create\n    return self.create(**params), True\n.venv/lib/python3.13/site-packages/django/db/models/query.py:679: in create\n    obj.save(force_insert=True, using=self.db)\nmainapp/post.py:208: in save\n    self.clean()\nmainapp/post.py:199: in clean\n    raise ValidationError(\"Vote must be for either a thread or a post, not both or neither.\")\nE   django.core.exceptions.ValidationError: ['Vote must be for either a thread or a post, not both or neither.']"}, "teardown": {"duration": 0.0011501160042826086, "outcome": "passed"}}, {"nodeid": "tests/integration/test_data_consistency.py::TestTransactionIntegrity::test_bulk_operation_atomicity", "lineno": 29, "outcome": "passed", "keywords": ["test_bulk_operation_atomicity", "TestTransactionIntegrity", "test_data_consistency.py", "integration", "tests", "sumy", ""], "setup": {"duration": 0.006142921018181369, "outcome": "passed"}, "call": {"duration": 0.1629398700024467, "outcome": "passed", "stdout": "\n============================================================\nTEST: test_bulk_operation_atomicity\n============================================================\n  Test that bulk operations are atomic\n  \n  Verifies:\n  - All succeed or all fail\n  - Partial updates don't occur\n  - Database remains consistent\n============================================================\n\n", "log": [{"name": "django.request", "msg": "Bad Request: /api/v1/events/bulk_create/", "args": null, "levelname": "WARNING", "levelno": 30, "pathname": "/mnt/c/repos/sumy/.venv/lib/python3.13/site-packages/django/utils/log.py", "filename": "log.py", "module": "log", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 248, "funcName": "log_response", "created": 1750146252.9149683, "msecs": 914.0, "relativeCreated": 40115.279415, "thread": 140354745313088, "threadName": "MainThread", "processName": "MainProcess", "process": 45844, "taskName": null, "status_code": 400, "request": "<WSGIRequest: POST '/api/v1/events/bulk_create/'>"}]}, "teardown": {"duration": 0.00030190200777724385, "outcome": "passed"}}, {"nodeid": "tests/integration/test_data_consistency.py::TestTransactionIntegrity::test_concurrent_update_safety", "lineno": 29, "outcome": "passed", "keywords": ["test_concurrent_update_safety", "TestTransactionIntegrity", "test_data_consistency.py", "integration", "tests", "sumy", ""], "setup": {"duration": 0.0007492809963878244, "outcome": "passed"}, "call": {"duration": 0.7869518320076168, "outcome": "passed", "stdout": "\n============================================================\nTEST: test_concurrent_update_safety\n============================================================\n  Test that concurrent updates don't cause inconsistencies\n  \n  Verifies:\n  - Race conditions are handled\n  - Optimistic locking works (if implemented)\n  - Final state is consistent\n============================================================\n\nPost creation request data: <QueryDict: {'thread': ['3303'], 'content': ['New post content']}>\n"}, "teardown": {"duration": 0.0008050629985518754, "outcome": "passed"}}, {"nodeid": "tests/integration/test_notification_flow.py::TestNotificationFlows::test_advertisement_comment_notifications", "lineno": 29, "outcome": "passed", "keywords": ["test_advertisement_comment_notifications", "TestNotificationFlows", "test_notification_flow.py", "integration", "tests", "sumy", ""], "setup": {"duration": 0.005561850004596636, "outcome": "passed"}, "call": {"duration": 0.3369416620116681, "outcome": "passed", "stdout": "\n============================================================\nTEST: test_advertisement_comment_notifications\n============================================================\n  Test notifications for advertisement interactions\n  \n  Verifies:\n  - Ad author gets notified of comments\n  - Private comments trigger different notifications\n  - Expired ad notifications are handled\n============================================================\n\n"}, "teardown": {"duration": 0.00027584200142882764, "outcome": "passed"}}, {"nodeid": "tests/integration/test_notification_flow.py::TestNotificationFlows::test_event_reminder_notifications", "lineno": 29, "outcome": "passed", "keywords": ["test_event_reminder_notifications", "TestNotificationFlows", "test_notification_flow.py", "integration", "tests", "sumy", ""], "setup": {"duration": 0.0008096029923763126, "outcome": "passed"}, "call": {"duration": 0.17809577999287285, "outcome": "passed", "stdout": "\n============================================================\nTEST: test_event_reminder_notifications\n============================================================\n  Test event reminder notifications\n  \n  Verifies:\n  - Upcoming events trigger reminders\n  - Different reminder times work\n  - User preferences are respected\n============================================================\n\n"}, "teardown": {"duration": 0.0003008029889315367, "outcome": "passed"}}, {"nodeid": "tests/integration/test_notification_flow.py::TestNotificationFlows::test_forum_reply_notifications", "lineno": 29, "outcome": "passed", "keywords": ["test_forum_reply_notifications", "TestNotificationFlows", "test_notification_flow.py", "integration", "tests", "sumy", ""], "setup": {"duration": 0.0008258339948952198, "outcome": "passed"}, "call": {"duration": 0.4842561020050198, "outcome": "passed", "stdout": "\n============================================================\nTEST: test_forum_reply_notifications\n============================================================\n  Test notifications when users reply to forum threads\n  \n  Verifies:\n  - Thread author gets notified of replies\n  - Other participants get notified\n  - Anonymous posts still trigger notifications\n  - User can control notification preferences\n============================================================\n\nPost creation request data: <QueryDict: {'thread': ['3304'], 'content': ['Great question! Here is my answer...'], 'is_anonymous': ['False']}>\nPost creation request data: <QueryDict: {'thread': ['3304'], 'content': ['I have a different perspective...'], 'is_anonymous': ['True'], 'nickname': ['Anonymous Helper']}>\n"}, "teardown": {"duration": 0.0002729310072027147, "outcome": "passed"}}, {"nodeid": "tests/integration/test_notification_flow.py::TestNotificationFlows::test_mention_notifications_in_posts", "lineno": 29, "outcome": "passed", "keywords": ["test_mention_notifications_in_posts", "TestNotificationFlows", "test_notification_flow.py", "integration", "tests", "sumy", ""], "setup": {"duration": 0.0007797710131853819, "outcome": "passed"}, "call": {"duration": 0.6357255289913155, "outcome": "passed", "stdout": "\n============================================================\nTEST: test_mention_notifications_in_posts\n============================================================\n  Test @mention functionality in forum posts\n  \n  Verifies:\n  - Mentions in posts trigger notifications\n  - Multiple mentions are handled\n  - Invalid mentions are ignored\n============================================================\n\nPost creation request data: <QueryDict: {'thread': ['3305'], 'content': ['Thanks @student123 and @helper456 for your help!'], 'is_anonymous': ['False']}>\nPost creation request data: <QueryDict: {'thread': ['3305'], 'content': ['Thanks @nonexistentuser for nothing!'], 'is_anonymous': ['False']}>\n"}, "teardown": {"duration": 0.0008404139953199774, "outcome": "passed"}}, {"nodeid": "tests/integration/test_notification_flow.py::TestDigestNotifications::test_daily_activity_digest", "lineno": 29, "outcome": "passed", "keywords": ["test_daily_activity_digest", "TestDigestNotifications", "test_notification_flow.py", "integration", "tests", "sumy", ""], "setup": {"duration": 0.005091205006465316, "outcome": "passed"}, "call": {"duration": 1.3888750819896813, "outcome": "passed", "stdout": "\n============================================================\nTEST: test_daily_activity_digest\n============================================================\n  Test generation of daily activity digest\n  \n  Verifies:\n  - Digest includes relevant content\n  - User preferences filter content\n  - Digest respects blacklist\n============================================================\n\n"}, "teardown": {"duration": 0.0002781619841698557, "outcome": "passed"}}, {"nodeid": "tests/integration/test_notification_flow.py::TestDigestNotifications::test_weekly_summary_generation", "lineno": 29, "outcome": "passed", "keywords": ["test_weekly_summary_generation", "TestDigestNotifications", "test_notification_flow.py", "integration", "tests", "sumy", ""], "setup": {"duration": 0.0008510150073561817, "outcome": "passed"}, "call": {"duration": 5.414463212975534, "outcome": "passed", "stdout": "\n============================================================\nTEST: test_weekly_summary_generation\n============================================================\n  Test weekly summary notification content\n  \n  Verifies:\n  - Summary includes top content\n  - Statistics are calculated correctly\n  - Personalization based on user activity\n============================================================\n\n"}, "teardown": {"duration": 0.0028827270143665373, "outcome": "passed"}}], "warnings": [{"message": "Pagination may yield inconsistent results with an unordered object_list: <class 'map.models.Building'> QuerySet.", "category": "UnorderedObjectListWarning", "when": "runtest", "filename": "/mnt/c/repos/sumy/.venv/lib/python3.13/site-packages/rest_framework/pagination.py", "lineno": 207}]}